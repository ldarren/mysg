const
HOUR1=1000*60*60,
DAY1=HOUR1*24,
DAYS=['Sun','Mon','Tue','Wed','Thu','Fri','Sat'],
MONTHS=['Jan','Feb','Mar','Apr','May','Jun','Jul','Aug','Sep','Oct','Nov','Dec'],
timeChecker=new RegExp(/^(0?[1-9]|1[012])[:\.]([0-5]\d)[ap]m$/),
spaceRM=new RegExp(/\s+/g,''),
timeSplit=new RegExp(/[:\.]/),
pObj=pico.export('pico/obj'),
fb=require('api/fbJSON'),
rdUser=require('redis/user'),
rdAction=require('redis/action'),
nextStep=function(user,action,name,next){
	action.push(name)
	rdAction.set(user,action,(err)=>{
		if (err) return next(this.error(500,err))
		next(null,`fb/ask${name}`)
	})
}

return {
	setup(context,cb){
		cb()
	},
	askRole(user,msg,next){
		Object.assign(msg,fb.message(
			user,
			fb.text(
				`Hi ${user.first_name} ${user.last_name}, what is your role?`,
				[
					fb.quickTextReply('Passenger','passenger'),
					fb.quickTextReply('Driver','driver')
				]
			)
		))
		next()
	},
	addRole(user,action,evt,next){
		const payload=pObj.dotchain(evt,['message','quick_reply','payload'])

		switch(payload){
		case 'passenger':
		case 'driver':
			user.role=payload
			break
		default: return next(null,'fb/askRole')
		}
		action.pop()
		rdUser.set(user,(err)=>{
			if (err) return next(this.error(500,err))
			next()
		})
	},
	$postback(user,action,evt,next){
		const payload = pObj.dotchain(evt,['postback','payload'])

		if (!payload) return next(null,'fb/lostAt')

		const [path,...rest]=payload.split(':')
		action.push(...rest)
		next(null,`fb/${path}`)
	},
	askAction(user,msg,next){
		if ('driver'===user.role){
			Object.assign(msg,fb.message(
				user,
				fb.text(
					'How can i help you?',
					[
						fb.quickTextReply('Add new trip','addTrip'),
						fb.quickTextReply('View my trips','myTrip'),
						fb.quickTextReply('Change Role','Role'),
					]
				)
			))
		}else{
			Object.assign(msg,fb.message(
				user,
				fb.text(
					'How can i help you?',
					[
						fb.quickTextReply('Find trip by date','findByDate'),
						fb.quickTextReply('Find trip by time','findByTime'),
						fb.quickTextReply('View my rides','myRide'),
						fb.quickTextReply('Change Role','Role'),
					]
				)
			))
		}
		next()
	},
	$addAction(user,action,evt,name,next){
		const payload=pObj.dotchain(evt,['message','quick_reply','payload'])
		if(!payload) return next(null,'fb/askAction')
		action.length=0
		if ('driver'===user.role){
			switch(payload){
			case 'addTrip':
				action.push(payload)
				this.set(name,'TripDate')
				break
			case 'myTrip':
				action.push(payload)
				return next(null, 'fb/compileAction')
			case 'Role':
				return nextStep.call(this,user,action,payload,next)
			default: return next(null,'fb/askAction')
			}
		}else{
			switch(payload){
			case 'findByDate':
				action.push(payload)
				this.set(name,'ListDate')
				break
			case 'findByTime':
				action.push(payload)
				this.set(name,'FindDate')
				break
			case 'myRide':
				action.push(payload)
				return next(null, 'fb/compileAction')
			case 'Role':
				return nextStep.call(this,user,action,payload,next)
			default: return next(null,'fb/askAction')
			}
		}
		next()
	},
	/*
	 * TODO: test this step when server crash, can the user command flow continue?
	 * - list, + end of
	 */
	$compileAction(user,action,cmd,next){
console.log('$compileAction',JSON.stringify(action))
		cmd['type']=action.shift()

		for(let j=[],v1,k,v; action.length; ){
			k=action.shift()
			v=action.shift()
			switch(k.charAt(0)){
			case '-': j.push(v); break
			case '+':
				if (null !== v) j.push(v);
				switch(k.charAt(1)){
				case '@': // date time
					if (2===j.length) j[0]=j[0].split('T')[0] // get date part of 2017-03-31T09:27:19.731Z

					v1=Date.parse(j.join(' '))-(user.timezone*HOUR1)
					break
				case '.': // string join
					v1=j.join(' ')
					break
				case '#': // number plus
					v1=j.reduce((acc,val)=>{return acc+=val},0)
					break
				case '$': // immutable
					v1=j[0]
					break
				case ':': // immutable array
					v1=j
					break
				}
				cmd[k.slice(2)]=v1
				j=[]
			}
		}
		action.length=0
		rdAction.del(user)
		next(null, `fb/${cmd.type}`)
	},
	nextStep:nextStep,
	finalStep(user,action,next){
		rdAction.set(user,action,(err)=>{
			if (err) return next(this.error(500,err))
			next(null,'fb/compileAction')
		})
	},
	askDate(user,msg,text,next){
		const
		replies=[],
		now=Date.now()+user.timezone*HOUR1

		for(let i=0,d; i<7; i++){
			d=new Date((DAY1*i)+now)
			replies.push(fb.quickTextReply(`${DAYS[d.getDay()]}:${d.getDate()}/${MONTHS[d.getMonth()]}/${d.getFullYear()}`,d.toISOString()))
		}
		Object.assign(msg, fb.message(
			user,
			fb.text(text, replies)
		))
		next()
	},
	//askTime generated by createMsg
	addTime(user,action,evt,key,next){
		const text=pObj.dotchain(evt,['message','text'])

		if(!text) return next(null,`fb/ask${action[action.length-1]}`)
		const txt=text.toLowerCase().replace(spaceRM, '')
		if (!timeChecker.test(txt)) return next(null,`fb/ask${action[action.length-1]}`)
		const add='p'===txt.charAt(txt.length-2)?12:0
		const [hr,min]=txt.slice(0,-2).split(timeSplit)
		action.pop()
		action.push(key, (parseInt(hr)+add)+':'+min)
		next()
	},
	createMsg(user,msg,text,next){
		Object.assign(msg,fb.message(user,fb.text(text)))
		next()
	},
	readQuickPayloadTo(action,evt,key,next){
		const payload=pObj.dotchain(evt,['message','quick_reply','payload'])
console.log('readQuickPayloadTo',payload)
		if(!payload) return next(null,`fb/ask${action[action.length-1]}`)
		action.pop()
		action.push(key,payload)
		next()
	},
	readTextInputTo(action,evt,key,value,next){
		action.pop()
		action.push(key, pObj.dotchain(evt,['message','text'], value))
		next()
	}
}
